{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","robotSs","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.8d9797a9.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({name, email, id}) => {\n    return (\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img alt=\"robots\" src={\"https://robohash.org/\"+id+\"?200x200\"} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n\n    return (\n        <div>\n        {\n            robots.map((user, i) => {\n                return (\n                    <Card \n                    key={i}\n                    id={robots[i].id}\n                    name={robots[i].name}\n                    email={robots[i].email}\n                    />\n                );\n            })\n        }\n    </div>\n    );\n}\n\nexport default CardList;","import React from \"react\";\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    return(\n        <div className=\"pa2\">\n            <input className=\"pa3 ba b--green bg-lightest-blue\"\n            type=\"search\"\n            placeholder=\"search robots\"\n            onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from \"react\";\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    )\n};\n\nexport default Scroll;","import React, {Component} from \"react\";\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({hasError:true})\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Ooops. that's not good.</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry;","import React, { Component } from \"react\";\nimport {connect} from \"react-redux\";\nimport CardList from \"../components/CardList\";\nimport Searchbox from '../components/SearchBox';\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundry from \"../components/ErrorBoundry\";\n\nimport \"./App.css\";\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nclass App extends Component {\n\n    componentDidMount() {\n        this.props.onRequestRobots();\n    }\n\n    render() {\n        const {searchField, onSearchChange, robots, isPending   } = this.props;\n        const filteredRobots = robots.filter(robots => {\n            return robots.name.toLowerCase().includes(searchField.toLowerCase());\n        })\n\n        return isPending ?\n        <h1>Loading</h1> :\n            (\n                <div className=\"tc\">\n                    <h1>Robofriends</h1>\n                    <Searchbox searchChange={onSearchChange} />\n                    <Scroll>\n                        <ErrorBoundry>\n                            <CardList robots={filteredRobots} />\n                        </ErrorBoundry>\n                    </Scroll>\n                </div>\n                )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({type:REQUEST_ROBOTS_PENDING});\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response=>response.json())\n        .then(data=>dispatch({type:REQUEST_ROBOTS_SUCCESS, payload: data}))\n        .catch(error => dispatch({type:REQUEST_ROBOTS_FAILED, payload: error}))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, {searchField:action.payload})\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, {isPending:true})\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, {robotSs:action.payload,isPending:false})\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, {robots:action.payload, isPending:false})\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport {searchRobots, requestRobots} from './reducers';\n\nimport \"tachyons\";\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}